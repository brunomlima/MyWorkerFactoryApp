using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using MyWorkerFactoryApp.Configurations;
using System;
using System.Linq;

public static class StartupLogger
{
    public static void LogStartupMessage(IConfiguration configuration, IHostEnvironment hostingEnvironment, ILogger logger)
    {
        // ‚úÖ Obter a configura√ß√£o do Worker
        var workerConfig = configuration.GetSection("WorkerConfig").Get<WorkerConfig>() ?? new WorkerConfig();

        // ‚úÖ Mensagem de inicializa√ß√£o
        logger.LogInformation("üöÄ MyWorkerFactoryApp Iniciado!");
        logger.LogInformation("üåç Ambiente: {EnvironmentName}", hostingEnvironment.EnvironmentName);

        // ‚úÖ Contagem de servi√ßos ativos/inativos
        int ativos = workerConfig.Servicos.Count(s => s.Ativo);
        int inativos = workerConfig.Servicos.Count(s => !s.Ativo);

        logger.LogInformation("üì¢ Total de servi√ßos configurados: {Total} | Ativos: {Ativos} ‚úÖ | Inativos: {Inativos} ‚ùå",
            workerConfig.Servicos.Count, ativos, inativos);

        // ‚úÖ Listar servi√ßos com hor√°rios de execu√ß√£o
        foreach (var servico in workerConfig.Servicos)
        {
            if (servico.Horario != null)
            {
                logger.LogInformation("‚û°Ô∏è {ServicoNome}: {Status} | ‚è∞ {HoraInicio} - {HoraTermino} | ‚è≥ Delay: {TempoEsperaMs}ms",
                    servico.Nome, servico.Ativo ? "Ativo ‚úÖ" : "Desativado ‚ùå",
                    servico.Horario.Inicio, servico.Horario.Fim, servico.TempoEsperaMs);
            }
            else
            {
                logger.LogInformation("‚û°Ô∏è {ServicoNome}: {Status} | ‚è≥ Delay: {TempoEsperaMs}ms",
                    servico.Nome, servico.Ativo ? "Ativo ‚úÖ" : "Desativado ‚ùå",
                    servico.TempoEsperaMs);
            }
        }

        logger.LogInformation("üìÖ Monitorando hor√°rios de execu√ß√£o...");
    }
}
